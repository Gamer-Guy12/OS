#ifndef X86_64_VIMEMORY_H
#define X86_64_VIMEMORY_H

#include <libk/lock.h>
#include <stddef.h>
#include <stdint.h>

typedef struct vmm_region_struct vmm_region_t;

typedef enum {
  VMM_USERSPACE = 1,
} vmm_region_flags;

typedef struct vmm_region_mngr_struct {
  vmm_region_t *region;
} vmm_region_mngr_t;

/// Code is no write
///
/// Data is no exec
///
/// Readonly is no exec or write
///
///
/// Autogen (Autogenerated code) is not restricted
///
/// Heap is no exec
///
/// Stack is no exec
///
/// MMap is no exec
///
/// This prolly sucks
typedef struct vmm_region_struct {
  void *start_addr;
  void *end_addr;
  uint64_t flags;
  size_t padding_1;

  // These regions can change their start and end
  // Start must always be higher than end so for the stack it should just
  // subtract from start
  struct {
    void *start;
    void *end;
    vmm_region_mngr_t *manager;
    spinlock_t lock;
    uint16_t padding_1;
    uint32_t padding_2;
  } code, data, readonly, autogen, heap, stack, mmap;

} vmm_region_t;

#endif
